{
  "address": "0x62BE94A2Af50Cc39C89493E369098648762fb993",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trust",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedROI",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earlyWithdrawPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctCashReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitPct",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "contract RWF_Trust[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33d8acda907cbe841e02ecc7d3eae179944a768b91ec35df50617a96dda7a9fb",
  "receipt": {
    "to": null,
    "from": "0xb20Ae59C0ACfb66d2E866c3f55361b9683337A33",
    "contractAddress": "0x62BE94A2Af50Cc39C89493E369098648762fb993",
    "transactionIndex": 89,
    "gasUsed": "2864163",
    "logsBloom": "0x
    "blockHash": "0x330cbf4773e433aec75aa68d21ef8f360485eeb102538d97a358c9d555e95d36",
    "transactionHash": "0x33d8acda907cbe841e02ecc7d3eae179944a768b91ec35df50617a96dda7a9fb",
    "logs": [
      {
        "transactionIndex": 89,
        "blockNumber": 5400919,
        "transactionHash": "0x33d8acda907cbe841e02ecc7d3eae179944a768b91ec35df50617a96dda7a9fb",
        "address": "0x62BE94A2Af50Cc39C89493E369098648762fb993",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b20ae59c0acfb66d2e866c3f55361b9683337a33"
        ],
        "data": "0x",
        "logIndex": 1091,
        "blockHash": "0x330cbf4773e433aec75aa68d21ef8f360485eeb102538d97a358c9d555e95d36"
      }
    ],
    "blockNumber": 5400919,
    "cumulativeGasUsed": "24326888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb20Ae59C0ACfb66d2E866c3f55361b9683337A33"
  ],
  "numDeployments": 4,
  "solcInputHash": "2e40a73128724818dc0e0648fbdd8903",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trust\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctCashReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPct\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract RWF_Trust[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenShopFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/TokenShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.24;\\n\\n/* \\nLine to Deploy in Remix:\\nBufficornCastle,BCC,500000,1000000000000000000,1709420650,15000000000000000000,10000000000000000000,20000000000000000000,0x5B38Da6a701c568545dCfcB03FcB875f56beddC4,15000000000000000000,https://pbs.twimg.com/media/GHhtNknWMAAK4hZ?format=jpg&name=4096x4096\\n2024-03-02 16:04:10 -> This is the TimeStamp for the deploy test string\\n*/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract RWF_Trust is ERC20, ERC20Permit, Ownable {\\n\\n    uint256 private maxTokens;\\n    uint256 private initialPrice; //in 10**18 USD\\n    uint256 private price; //in 10**18 USD\\n    uint256 private dueDate; //UTC Unix Timestamp\\n    uint256 private expectedROI; //in 10**18\\n    uint256 private earlyWithdrawPenalty; //in 10**18 USD\\n    uint256 private pctCashReserve; //in 10**18\\n    uint256 private profitPct; //in 10**18\\n    uint256 private minOwnedTokens = 20;\\n    address[] private beneficiaries;\\n    string private imageURL;\\n    address private nftContractAddress;\\n\\n    constructor(\\n        string  memory _name,\\n        string  memory _symbol,\\n        uint256 _maxTokens,\\n        uint256 _price,\\n        uint256 _dueDate,\\n        uint256 _expectedROI,\\n        uint256 _earlyWithdrawPenalty,\\n        uint256 _pctCashReserve,\\n        address _trust,\\n        uint256 _profitPct,\\n        string memory _imageURL\\n    )\\n        ERC20(_name, _symbol)\\n        ERC20Permit(_name)\\n        Ownable(_trust)\\n    {\\n        maxTokens = _maxTokens;\\n        initialPrice = _price;\\n        setPrice(_price);\\n        dueDate = _dueDate;\\n        expectedROI = _expectedROI;\\n        earlyWithdrawPenalty = _earlyWithdrawPenalty;\\n        pctCashReserve = _pctCashReserve;\\n        profitPct = _profitPct;\\n        imageURL = _imageURL;\\n        \\n    } //end of constructor\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 0;\\n    }\\n\\n    function setPrice(uint256 newPrice) public onlyOwner {\\n        price = newPrice;\\n    }\\n\\n    function getPrice() public view returns (uint256) {\\n        return price;\\n    }\\n\\n    function setDueDate(uint256 _dueDate) public onlyOwner {\\n        dueDate = _dueDate;\\n    }\\n\\n    function getDueDate() public view returns (uint256) {\\n        return dueDate;\\n    }\\n\\n    function setNftContractAddress(address _address) public onlyOwner {\\n        nftContractAddress = _address;\\n    }\\n\\n    function getNftContractAddress() public view returns (address) {\\n        return nftContractAddress;\\n    }\\n\\n    function setImgUrl(string memory _imgUrl) public onlyOwner {\\n        imageURL = _imgUrl;\\n    }\\n\\n    function getImgUrl() public view returns (string memory) {\\n        return imageURL;\\n    }\\n\\n    function getEarlyWithdrawPenalty() public view returns (uint256) {\\n        return earlyWithdrawPenalty;\\n    }\\n\\n    function getMinOwnedTokens() public view returns (uint256) {\\n        return minOwnedTokens;\\n    }\\n\\n    function getAvailableTokens() public view returns (uint256) {\\n        return maxTokens - totalSupply();\\n    }\\n\\n    function ethExchangeValue() private pure returns (uint256) {\\n        //FIXME: should ask an oracle the current price in USD of one ETH:\\n        return 333531 * 10**16; //2024-02-29.\\n    }\\n\\n    function buy() public payable {\\n        uint256 tokenAmount = msg.value * ethExchangeValue() / (price * 10**18);\\n        require(tokenAmount > 0, \\\"Insufficient ETH amount to buy a single token\\\");\\n        require(tokenAmount + balanceOf(msg.sender) >= minOwnedTokens,\\n            \\\"Insufficient ETH amount to buy the minimum amount of tokens\\\");\\n        require(tokenAmount <= getAvailableTokens(), \\\"Insufficient tokens available, send less ETH\\\");\\n        require(block.timestamp < dueDate, \\\"Fund has been terminated\\\");\\n\\n        _mint(msg.sender, tokenAmount);\\n\\n        payable(owner()).transfer( (100 * 10**18 - pctCashReserve) * msg.value / (100 * 10**18) );\\n\\n        uint256 excessAmount = msg.value - (tokenAmount * price * 10**18 / ethExchangeValue());\\n        if (excessAmount > 0) {\\n            payable(msg.sender).transfer(excessAmount);\\n        }\\n\\n        // This is buyer's first token purchase. Let's give her an NFT.\\n        if (balanceOf(msg.sender) == tokenAmount) {\\n            (bool success, ) = nftContractAddress.call(abi.encodeWithSignature(\\\"safeMint(address)\\\", msg.sender));\\n            require(success, \\\"NFT minting failed\\\");\\n        }\\n    }\\n\\n    function _sell(address payable seller, uint256 tokenAmount) private {\\n        require(tokenAmount > 0, \\\"Invalid token amount\\\");\\n        require(balanceOf(seller) >= tokenAmount, \\\"Insufficient tokens in your balance\\\");\\n        //FIXME: add check for selling all tokens or at least minOwnedTokens.\\n\\n        uint256 penalty = 0;\\n        if (block.timestamp < dueDate) {\\n            penalty = tokenAmount * price * earlyWithdrawPenalty / (100 * 10**18);\\n        }\\n        \\n        uint256 profit = 0;\\n        if (price > initialPrice) {\\n            profit = (price - initialPrice) * tokenAmount;\\n        }\\n        uint256 platformProfit = profit * profitPct / (100 * 10**18);\\n        uint256 amountUSD = tokenAmount * price - penalty - platformProfit;\\n        uint256 ethAmount =  amountUSD * 10**18 / ethExchangeValue();\\n        require (address(this).balance >= ethAmount, \\\"There's not enough funds in the contract to pay the beneficiary\\\");\\n        require(ethAmount > 0, \\\"There's nothing left for you my friend, better luck next time\\\");\\n        _burn(seller, tokenAmount);\\n        payable(seller).transfer(ethAmount);\\n    }\\n\\n    function sell(uint256 tokenAmount) public {\\n        _sell(payable(msg.sender), tokenAmount);\\n    }\\n\\n    function investmentExecution() public payable onlyOwner {\\n        uint256 netPaymentETH = totalSupply() * price * 10**18 / ethExchangeValue();\\n        uint256 totalPaymentETH = (100 * 10**18 - profitPct) * netPaymentETH / (100 * 10**18);\\n        require(block.timestamp > dueDate, \\n            \\\"You need to wait until the due date to excecute this function\\\");\\n        require(address(this).balance >= totalPaymentETH,\\n            \\\"Not enough funds to execute investment returns\\\");\\n        \\n        for (uint32 i = 0; i != beneficiaries.length; i++) {\\n            address payable beneficiary = payable(beneficiaries[i]);\\n            if (balanceOf(beneficiary) == 0) {\\n                continue;\\n            }\\n            _sell(beneficiary, balanceOf(beneficiary));\\n        }\\n    }\\n\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        bool toExisted = balanceOf(to) > 0;\\n        super._update(from, to, value);\\n        bool toExists = balanceOf(to) > 0;\\n        if (!toExisted && toExists) {\\n            beneficiaries.push(to);\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) public onlyOwner {\\n        require(address(this).balance >= amount, \\\"Insufficient funds\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    function getMetadata() public view returns(string memory) {\\n        return string.concat('{\\\\n'\\n            '\\\"price\\\": ', Strings.toString(getPrice()), ',\\\\n',\\n            '\\\"dueDate\\\": ', Strings.toString(getDueDate()), ',\\\\n',\\n            '\\\"earlyWithdrawPenalty\\\": ', Strings.toString(getEarlyWithdrawPenalty()), ',\\\\n',\\n            '\\\"minOwnedTokens\\\": ', Strings.toString(getMinOwnedTokens()), ',\\\\n',\\n            '\\\"availableTokens\\\": ', Strings.toString(getAvailableTokens()), ',\\\\n',\\n            '\\\"nftContractAddress\\\": \\\"', Strings.toHexString(getNftContractAddress()), '\\\",\\\\n',\\n            '\\\"imgUrl\\\": \\\"', getImgUrl(), '\\\"\\\\n',\\n        \\\"}\\\");\\n    }\\n}\",\"keccak256\":\"0x0e72aff5e45b68cf38c4d96e338392610c216b3e76b947c75a6a0b1d99cdec0e\",\"license\":\"MIT\"},\"contracts/TokenShopFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./TokenShop.sol\\\";\\n\\nlibrary TokenData {\\n    struct Token {\\n        string  name;\\n        string  symbol;\\n        uint256 maxTokens;\\n        uint256 initialPrice; //in 10**18 USD\\n        uint256 price; //in 10**18 USD\\n        uint256 dueDate; //UTC Unix Timestamp\\n        uint256 expectedROI; //in 10**18\\n        uint256 earlyWithdrawPenalty; //in 10**18 USD\\n        uint256 pctCashReserve; //in 10**18\\n        string  imageUrl;\\n        uint256 profitPct; //in 10**18\\n        uint256 minOwnedTokens;\\n        address[] beneficiaries;\\n    }\\n}\\n\\ncontract TokenFactory is Ownable {\\n    RWF_Trust[] private tokens;\\n\\n    constructor(\\n        address _trust\\n    ) Ownable(_trust) {\\n        \\n    }\\n\\n    // BufficornCastle,BCC,500000,1000000000000000000,1709420650,15000000000000000000,10000000000000000000,20000000000000000000,15000000000000000000,https://daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.jpg\\n\\n    function createToken(\\n        string memory  name,\\n        string memory  symbol,\\n        uint256 maxTokens,\\n        uint256 initialPrice, //in 10**18 USD\\n        uint256 dueDate, //UTC Unix Timestamp\\n        uint256 expectedROI, //in 10**18\\n        uint256 earlyWithdrawPenalty, //in 10**18 USD\\n        uint256 pctCashReserve, //in 10**18\\n        uint256 profitPct, //in 10**18\\n        string memory  imageUrl\\n    ) public onlyOwner {\\n        RWF_Trust token = new RWF_Trust(\\n            name,\\n            symbol,\\n            maxTokens,\\n            initialPrice,\\n            dueDate,\\n            expectedROI,\\n            earlyWithdrawPenalty,\\n            pctCashReserve,\\n            address(this),\\n            profitPct,\\n            imageUrl            \\n        );\\n\\n        tokens.push(token);\\n    }\\n\\n    function getTokens() public view returns (RWF_Trust[] memory) {\\n        return tokens;\\n    }\\n}\",\"keccak256\":\"0x49cba1404f78536a6811b0a5216d6e5bb130c6b66ff58abd07db8406aac457a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161336c38038061336c83398101604081905261002f916100be565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161006e565b50506100ee565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d057600080fd5b81516001600160a01b03811681146100e757600080fd5b9392505050565b61326f806100fd6000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806318b0bbef1462000063578063715018a6146200007c5780638da5cb5b1462000086578063aa6ca80814620000a6578063f2fde38b14620000bf575b600080fd5b6200007a6200007436600462000387565b620000d6565b005b6200007a6200018b565b6000546040516001600160a01b0390911681526020015b60405180910390f35b620000b0620001a3565b6040516200009d91906200045f565b6200007a620000d0366004620004ae565b62000207565b620000e06200024f565b60008a8a8a8a8a8a8a8a308b8b604051620000fb90620002ce565b620001119b9a9998979695949392919062000528565b604051809103906000f0801580156200012e573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03929092169190911790555050505050505050505050565b620001956200024f565b620001a160006200027e565b565b60606001805480602002602001604051908101604052809291908181526020018280548015620001fd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001de575b5050505050905090565b620002116200024f565b6001600160a01b0381166200024157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200024c816200027e565b50565b6000546001600160a01b03163314620001a15760405163118cdaa760e01b815233600482015260240162000238565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612c8280620005b883390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200030457600080fd5b813567ffffffffffffffff80821115620003225762000322620002dc565b604051601f8301601f19908116603f011681019082821181831017156200034d576200034d620002dc565b816040528381528660208588010111156200036757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806101408b8d031215620003a857600080fd5b8a3567ffffffffffffffff80821115620003c157600080fd5b620003cf8e838f01620002f2565b9b5060208d0135915080821115620003e657600080fd5b620003f48e838f01620002f2565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d0135955060e08d013594506101008d013593506101208d01359150808211156200043e57600080fd5b506200044d8d828e01620002f2565b9150509295989b9194979a5092959850565b6020808252825182820181905260009190848201906040850190845b81811015620004a25783516001600160a01b0316835292840192918401916001016200047b565b50909695505050505050565b600060208284031215620004c157600080fd5b81356001600160a01b0381168114620004d957600080fd5b9392505050565b6000815180845260005b818110156200050857602081850181015186830182015201620004ea565b506000602082860101526020601f19601f83011685010191505092915050565b60006101608083526200053e8184018f620004e0565b9050828103602084015262000554818e620004e0565b90508b60408401528a60608401528960808401528860a08401528760c08401528660e084015260018060a01b03861661010084015284610120840152828103610140840152620005a58185620004e0565b9e9d505050505050505050505050505056fe61016060405260146011553480156200001757600080fd5b5060405162002c8238038062002c828339810160408190526200003a91620003b6565b828b80604051806040016040528060018152602001603160f81b8152508e8e81600390816200006a91906200053f565b5060046200007982826200053f565b506200008b91508390506005620001be565b610120526200009c816006620001be565b61014052815160208084019190912060e052815190820120610100524660a0526200012a60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b0381166200016457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200016f81620001f7565b506009899055600a889055620001858862000249565b600c879055600d869055600e859055600f84905560108290556013620001ac82826200053f565b50505050505050505050505062000665565b6000602083511015620001de57620001d68362000258565b9050620001f1565b81620001eb84826200053f565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002536200029b565b600b55565b600080829050601f8151111562000286578260405163305a27a960e01b81526004016200015b91906200060b565b8051620002938262000640565b179392505050565b6008546001600160a01b03163314620002ca5760405163118cdaa760e01b81523360048201526024016200015b565b565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002ff578181015183820152602001620002e5565b50506000910152565b600082601f8301126200031a57600080fd5b81516001600160401b0380821115620003375762000337620002cc565b604051601f8301601f19908116603f01168101908282118183101715620003625762000362620002cc565b816040528381528660208588010111156200037c57600080fd5b6200038f846020830160208901620002e2565b9695505050505050565b80516001600160a01b0381168114620003b157600080fd5b919050565b60008060008060008060008060008060006101608c8e031215620003d957600080fd5b8b516001600160401b03811115620003f057600080fd5b620003fe8e828f0162000308565b60208e0151909c5090506001600160401b038111156200041d57600080fd5b6200042b8e828f0162000308565b9a505060408c0151985060608c0151975060808c0151965060a08c0151955060c08c0151945060e08c01519350620004676101008d0162000399565b6101208d01516101408e015191945092506001600160401b038111156200048d57600080fd5b6200049b8e828f0162000308565b9150509295989b509295989b9093969950565b600181811c90821680620004c357607f821691505b602082108103620004e457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200053a576000816000526020600020601f850160051c81016020861015620005155750805b601f850160051c820191505b81811015620005365782815560010162000521565b5050505b505050565b81516001600160401b038111156200055b576200055b620002cc565b62000573816200056c8454620004ae565b84620004ea565b602080601f831160018114620005ab5760008415620005925750858301515b600019600386901b1c1916600185901b17855562000536565b600085815260208120601f198616915b82811015620005dc57888601518255948401946001909101908401620005bb565b5085821015620005fb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200062c816040850160208701620002e2565b601f01601f19169190910160400192915050565b80516020808301519190811015620004e45760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516125c2620006c06000396000611624015260006115f7015260006111e1015260006111b9015260006111140152600061113e0152600061116801526125c26000f3fe6080604052600436106101e35760003560e01c806391b7f5ed11610102578063d505accf11610095578063de30c3b811610064578063de30c3b814610536578063e35568cb1461054b578063e4849b3214610560578063f2fde38b1461058057600080fd5b8063d505accf1461049b578063d864b847146104bb578063da31d640146104d0578063dd62ed3e146104f057600080fd5b8063a6f2ae3a116100d1578063a6f2ae3a14610435578063a9059cbb1461043d578063b8959a8b1461045d578063d13830661461047b57600080fd5b806391b7f5ed146103cb57806395d89b41146103eb57806398d5fdca14610400578063a5d8b6501461041557600080fd5b8063636f7def1161017a5780637a5b4f59116101495780637a5b4f591461033c5780637ecebe001461035157806384b0196e146103715780638da5cb5b1461039957600080fd5b8063636f7def146102ea57806370a08231146102f2578063715018a61461031257806379a95c701461032757600080fd5b806323b872dd116101b657806323b872dd146102775780632e1a7d4d14610297578063313ce567146102b95780633644e515146102d557600080fd5b806306fdde03146101e8578063095ea7b3146102135780631183577a1461024357806318160ddd14610262575b600080fd5b3480156101f457600080fd5b506101fd6105a0565b60405161020a9190611ede565b60405180910390f35b34801561021f57600080fd5b5061023361022e366004611f14565b610632565b604051901515815260200161020a565b34801561024f57600080fd5b50600e545b60405190815260200161020a565b34801561026e57600080fd5b50600254610254565b34801561028357600080fd5b50610233610292366004611f3e565b61064c565b3480156102a357600080fd5b506102b76102b2366004611f7a565b610670565b005b3480156102c557600080fd5b506040516000815260200161020a565b3480156102e157600080fd5b50610254610700565b6102b761070f565b3480156102fe57600080fd5b5061025461030d366004611f93565b6108ee565b34801561031e57600080fd5b506102b7610909565b34801561033357600080fd5b50601154610254565b34801561034857600080fd5b506101fd61091d565b34801561035d57600080fd5b5061025461036c366004611f93565b6109ab565b34801561037d57600080fd5b506103866109c9565b60405161020a9796959493929190611fae565b3480156103a557600080fd5b506008546001600160a01b03165b6040516001600160a01b03909116815260200161020a565b3480156103d757600080fd5b506102b76103e6366004611f7a565b610a0f565b3480156103f757600080fd5b506101fd610a1c565b34801561040c57600080fd5b50600b54610254565b34801561042157600080fd5b506102b7610430366004611f7a565b610a2b565b6102b7610a38565b34801561044957600080fd5b50610233610458366004611f14565b610dfb565b34801561046957600080fd5b506014546001600160a01b03166103b3565b34801561048757600080fd5b506102b761049636600461205d565b610e09565b3480156104a757600080fd5b506102b76104b636600461210e565b610e1d565b3480156104c757600080fd5b506101fd610f57565b3480156104dc57600080fd5b506102b76104eb366004611f93565b610f66565b3480156104fc57600080fd5b5061025461050b366004612181565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561054257600080fd5b50600c54610254565b34801561055757600080fd5b50610254610f90565b34801561056c57600080fd5b506102b761057b366004611f7a565b610fa8565b34801561058c57600080fd5b506102b761059b366004611f93565b610fb5565b6060600380546105af906121b4565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906121b4565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b5050505050905090565b600033610640818585610ff0565b60019150505b92915050565b60003361065a858285610ffd565b61066585858561107b565b506001949350505050565b6106786110da565b804710156106c25760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064015b60405180910390fd5b6008546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156106fc573d6000803e3d6000fd5b5050565b600061070a611107565b905090565b6107176110da565b600068b4ceb975c5301b0000600b546002546107339190612204565b61074590670de0b6b3a7640000612204565b61074f919061221b565b9050600068056bc75e2d631000008260105468056bc75e2d63100000610775919061223d565b61077f9190612204565b610789919061221b565b9050600c5442116108025760405162461bcd60e51b815260206004820152603d60248201527f596f75206e65656420746f207761697420756e74696c2074686520647565206460448201527f61746520746f20657863656375746520746869732066756e6374696f6e00000060648201526084016106b9565b804710156108695760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f7567682066756e647320746f206578656375746520696e766560448201526d73746d656e742072657475726e7360901b60648201526084016106b9565b60005b60125463ffffffff8216146108e957600060128263ffffffff168154811061089657610896612250565b6000918252602090912001546001600160a01b031690506108b6816108ee565b6000036108c357506108d7565b6108d5816108d0836108ee565b611232565b505b806108e181612266565b91505061086c565b505050565b6001600160a01b031660009081526020819052604090205490565b6109116110da565b61091b60006114f5565b565b606061093061092b600b5490565b611547565b61093c61092b600c5490565b61094861092b600e5490565b61095461092b60115490565b61095f61092b610f90565b6109796109746014546001600160a01b031690565b6115da565b610981610f57565b60405160200161099797969594939291906122a5565b604051602081830303815290604052905090565b6001600160a01b038116600090815260076020526040812054610646565b6000606080600080600060606109dd6115f0565b6109e561161d565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b610a176110da565b600b55565b6060600480546105af906121b4565b610a336110da565b600c55565b6000600b54670de0b6b3a7640000610a509190612204565b610a6368b4ceb975c5301b000034612204565b610a6d919061221b565b905060008111610ad55760405162461bcd60e51b815260206004820152602d60248201527f496e73756666696369656e742045544820616d6f756e7420746f20627579206160448201526c1039b4b733b632903a37b5b2b760991b60648201526084016106b9565b601154610ae1336108ee565b610aeb9083612420565b1015610b5f5760405162461bcd60e51b815260206004820152603b60248201527f496e73756666696369656e742045544820616d6f756e7420746f20627579207460448201527f6865206d696e696d756d20616d6f756e74206f6620746f6b656e73000000000060648201526084016106b9565b610b67610f90565b811115610bcb5760405162461bcd60e51b815260206004820152602c60248201527f496e73756666696369656e7420746f6b656e7320617661696c61626c652c207360448201526b0cadcc840d8cae6e6408aa8960a31b60648201526084016106b9565b600c544210610c1c5760405162461bcd60e51b815260206004820152601860248201527f46756e6420686173206265656e207465726d696e61746564000000000000000060448201526064016106b9565b610c26338261164a565b6008546001600160a01b03166001600160a01b03166108fc68056bc75e2d6310000034600f5468056bc75e2d63100000610c60919061223d565b610c6a9190612204565b610c74919061221b565b6040518115909202916000818181858888f19350505050158015610c9c573d6000803e3d6000fd5b50600068b4ceb975c5301b0000600b54610cb69084612204565b610cc890670de0b6b3a7640000612204565b610cd2919061221b565b610cdc903461223d565b90508015610d1357604051339082156108fc029083906000818181858888f19350505050158015610d11573d6000803e3d6000fd5b505b81610d1d336108ee565b036106fc576014546040513360248201526000916001600160a01b03169060440160408051601f198184030181529181526020820180516001600160e01b03166340d097c360e01b17905251610d739190612433565b6000604051808303816000865af19150503d8060008114610db0576040519150601f19603f3d011682016040523d82523d6000602084013e610db5565b606091505b50509050806108e95760405162461bcd60e51b8152602060048201526012602482015271139195081b5a5b9d1a5b99c819985a5b195960721b60448201526064016106b9565b60003361064081858561107b565b610e116110da565b60136106fc828261249f565b83421115610e415760405163313c898160e11b8152600481018590526024016106b9565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610e8e8c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ee982611680565b90506000610ef9828787876116ad565b9050896001600160a01b0316816001600160a01b031614610f40576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016106b9565b610f4b8a8a8a610ff0565b50505050505050505050565b6060601380546105af906121b4565b610f6e6110da565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f9b60025490565b60095461070a919061223d565b610fb23382611232565b50565b610fbd6110da565b6001600160a01b038116610fe757604051631e4fbdf760e01b8152600060048201526024016106b9565b610fb2816114f5565b6108e983838360016116db565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611075578181101561106657604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016106b9565b611075848484840360006116db565b50505050565b6001600160a01b0383166110a557604051634b637e8f60e11b8152600060048201526024016106b9565b6001600160a01b0382166110cf5760405163ec442f0560e01b8152600060048201526024016106b9565b6108e98383836117b0565b6008546001600160a01b0316331461091b5760405163118cdaa760e01b81523360048201526024016106b9565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561116057507f000000000000000000000000000000000000000000000000000000000000000046145b1561118a57507f000000000000000000000000000000000000000000000000000000000000000090565b61070a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600081116112795760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081d1bdad95b88185b5bdd5b9d60621b60448201526064016106b9565b80611283836108ee565b10156112dd5760405162461bcd60e51b815260206004820152602360248201527f496e73756666696369656e7420746f6b656e7320696e20796f75722062616c616044820152626e636560e81b60648201526084016106b9565b6000600c5442101561131b5768056bc75e2d63100000600e54600b54846113049190612204565b61130e9190612204565b611318919061221b565b90505b6000600a54600b5411156113475782600a54600b5461133a919061223d565b6113449190612204565b90505b600068056bc75e2d63100000601054836113619190612204565b61136b919061221b565b905060008184600b548761137f9190612204565b611389919061223d565b611393919061223d565b9050600068b4ceb975c5301b00006113b383670de0b6b3a7640000612204565b6113bd919061221b565b9050804710156114355760405162461bcd60e51b815260206004820152603f60248201527f54686572652773206e6f7420656e6f7567682066756e647320696e207468652060448201527f636f6e747261637420746f20706179207468652062656e65666963696172790060648201526084016106b9565b600081116114ab5760405162461bcd60e51b815260206004820152603d60248201527f54686572652773206e6f7468696e67206c65667420666f7220796f75206d792060448201527f667269656e642c20626574746572206c75636b206e6578742074696d6500000060648201526084016106b9565b6114b5878761183c565b6040516001600160a01b0388169082156108fc029083906000818181858888f193505050501580156114eb573d6000803e3d6000fd5b5050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060600061155483611872565b600101905060008167ffffffffffffffff81111561157457611574612047565b6040519080825280601f01601f19166020018201604052801561159e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846115a857509392505050565b60606106466001600160a01b038316601461194a565b606061070a7f00000000000000000000000000000000000000000000000000000000000000006005611aca565b606061070a7f00000000000000000000000000000000000000000000000000000000000000006006611aca565b6001600160a01b0382166116745760405163ec442f0560e01b8152600060048201526024016106b9565b6106fc600083836117b0565b600061064661168d611107565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000806116bf88888888611b75565b9250925092506116cf8282611c44565b50909695505050505050565b6001600160a01b0384166117055760405163e602df0560e01b8152600060048201526024016106b9565b6001600160a01b03831661172f57604051634a1406b160e11b8152600060048201526024016106b9565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561107557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516117a291815260200190565b60405180910390a350505050565b6000806117bc846108ee565b1190506117ca848484611cfd565b6000806117d6856108ee565b119050811580156117e45750805b1561183557601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b0386161790555b5050505050565b6001600160a01b03821661186657604051634b637e8f60e11b8152600060048201526024016106b9565b6106fc826000836117b0565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106118b15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106118dd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106118fb57662386f26fc10000830492506010015b6305f5e1008310611913576305f5e100830492506008015b612710831061192757612710830492506004015b60648310611939576064830492506002015b600a83106106465760010192915050565b606082600061195a846002612204565b611965906002612420565b67ffffffffffffffff81111561197d5761197d612047565b6040519080825280601f01601f1916602001820160405280156119a7576020820181803683370190505b509050600360fc1b816000815181106119c2576119c2612250565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119f1576119f1612250565b60200101906001600160f81b031916908160001a9053506000611a15856002612204565b611a20906001612420565b90505b6001811115611a98576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110611a5457611a54612250565b1a60f81b828281518110611a6a57611a6a612250565b60200101906001600160f81b031916908160001a90535060049290921c91611a918161255f565b9050611a23565b508115611ac25760405163e22e27eb60e01b815260048101869052602481018590526044016106b9565b949350505050565b606060ff8314611ae457611add83611e27565b9050610646565b818054611af0906121b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1c906121b4565b8015611b695780601f10611b3e57610100808354040283529160200191611b69565b820191906000526020600020905b815481529060010190602001808311611b4c57829003601f168201915b50505050509050610646565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611bb05750600091506003905082611c3a565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611c04573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c3057506000925060019150829050611c3a565b9250600091508190505b9450945094915050565b6000826003811115611c5857611c58612576565b03611c61575050565b6001826003811115611c7557611c75612576565b03611c935760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611ca757611ca7612576565b03611cc85760405163fce698f760e01b8152600481018290526024016106b9565b6003826003811115611cdc57611cdc612576565b036106fc576040516335e2f38360e21b8152600481018290526024016106b9565b6001600160a01b038316611d28578060026000828254611d1d9190612420565b90915550611d9a9050565b6001600160a01b03831660009081526020819052604090205481811015611d7b5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016106b9565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216611db657600280548290039055611dd5565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e1a91815260200190565b60405180910390a3505050565b60606000611e3483611e66565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f81111561064657604051632cd44ac360e21b815260040160405180910390fd5b60005b83811015611ea9578181015183820152602001611e91565b50506000910152565b60008151808452611eca816020860160208601611e8e565b601f01601f19169290920160200192915050565b602081526000611ef16020830184611eb2565b9392505050565b80356001600160a01b0381168114611f0f57600080fd5b919050565b60008060408385031215611f2757600080fd5b611f3083611ef8565b946020939093013593505050565b600080600060608486031215611f5357600080fd5b611f5c84611ef8565b9250611f6a60208501611ef8565b9150604084013590509250925092565b600060208284031215611f8c57600080fd5b5035919050565b600060208284031215611fa557600080fd5b611ef182611ef8565b60ff60f81b881681526000602060e06020840152611fcf60e084018a611eb2565b8381036040850152611fe1818a611eb2565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b8181101561203557835183529284019291840191600101612019565b50909c9b505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561206f57600080fd5b813567ffffffffffffffff8082111561208757600080fd5b818401915084601f83011261209b57600080fd5b8135818111156120ad576120ad612047565b604051601f8201601f19908116603f011681019083821181831017156120d5576120d5612047565b816040528281528760208487010111156120ee57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600080600060e0888a03121561212957600080fd5b61213288611ef8565b965061214060208901611ef8565b95506040880135945060608801359350608088013560ff8116811461216457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561219457600080fd5b61219d83611ef8565b91506121ab60208401611ef8565b90509250929050565b600181811c908216806121c857607f821691505b6020821081036121e857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610646576106466121ee565b60008261223857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610646576106466121ee565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff80831681810361227f5761227f6121ee565b6001019392505050565b6000815161229b818560208601611e8e565b9290920192915050565b6a03d8511383934b1b2911d160ad1b815260006122c5600b83018a612289565b61160560f11b815260026122e88183016a011323ab2a230ba32911d160ad1b9052565b6122f5600d83018b612289565b61160560f11b815291507f226561726c79576974686472617750656e616c7479223a20000000000000000082820152612331601a83018a612289565b61160560f11b815291507101136b4b727bbb732b22a37b5b2b739911d160751b828201526123626014830189612289565b61160560f11b815291507201130bb30b4b630b13632aa37b5b2b739911d1606d1b828201526123946015830188612289565b61160560f11b815291507f226e6674436f6e747261637441646472657373223a2022000000000000000000828201526123d06019830187612289565b6211160560e91b815291506a1134b6b3aab936111d101160a91b60038301526123fc600e830186612289565b61110560f11b81529150607d60f81b82820152506003019998505050505050505050565b80820180821115610646576106466121ee565b60008251612445818460208701611e8e565b9190910192915050565b601f8211156108e9576000816000526020600020601f850160051c810160208610156124785750805b601f850160051c820191505b8181101561249757828155600101612484565b505050505050565b815167ffffffffffffffff8111156124b9576124b9612047565b6124cd816124c784546121b4565b8461244f565b602080601f83116001811461250257600084156124ea5750858301515b600019600386901b1c1916600185901b178555612497565b600085815260208120601f198616915b8281101561253157888601518255948401946001909101908401612512565b508582101561254f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008161256e5761256e6121ee565b506000190190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220566764808c5607e9a00f9496d9f437df814a74b778a6abd62de36066e35dd4aa64736f6c63430008180033a26469706673582212205e20ccd13a496b21a976b6219c451f35e90c7f4da40bea6cb0e528aa313cf6a364736f6c63430008180033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806318b0bbef1462000063578063715018a6146200007c5780638da5cb5b1462000086578063aa6ca80814620000a6578063f2fde38b14620000bf575b600080fd5b6200007a6200007436600462000387565b620000d6565b005b6200007a6200018b565b6000546040516001600160a01b0390911681526020015b60405180910390f35b620000b0620001a3565b6040516200009d91906200045f565b6200007a620000d0366004620004ae565b62000207565b620000e06200024f565b60008a8a8a8a8a8a8a8a308b8b604051620000fb90620002ce565b620001119b9a9998979695949392919062000528565b604051809103906000f0801580156200012e573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03929092169190911790555050505050505050505050565b620001956200024f565b620001a160006200027e565b565b60606001805480602002602001604051908101604052809291908181526020018280548015620001fd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001de575b5050505050905090565b620002116200024f565b6001600160a01b0381166200024157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200024c816200027e565b50565b6000546001600160a01b03163314620001a15760405163118cdaa760e01b815233600482015260240162000238565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612c8280620005b883390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200030457600080fd5b813567ffffffffffffffff80821115620003225762000322620002dc565b604051601f8301601f19908116603f011681019082821181831017156200034d576200034d620002dc565b816040528381528660208588010111156200036757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806101408b8d031215620003a857600080fd5b8a3567ffffffffffffffff80821115620003c157600080fd5b620003cf8e838f01620002f2565b9b5060208d0135915080821115620003e657600080fd5b620003f48e838f01620002f2565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d0135955060e08d013594506101008d013593506101208d01359150808211156200043e57600080fd5b506200044d8d828e01620002f2565b9150509295989b9194979a5092959850565b6020808252825182820181905260009190848201906040850190845b81811015620004a25783516001600160a01b0316835292840192918401916001016200047b565b50909695505050505050565b600060208284031215620004c157600080fd5b81356001600160a01b0381168114620004d957600080fd5b9392505050565b6000815180845260005b818110156200050857602081850181015186830182015201620004ea565b506000602082860101526020601f19601f83011685010191505092915050565b60006101608083526200053e8184018f620004e0565b9050828103602084015262000554818e620004e0565b90508b60408401528a60608401528960808401528860a08401528760c08401528660e084015260018060a01b03861661010084015284610120840152828103610140840152620005a58185620004e0565b9e9d505050505050505050505050505056fe61016060405260146011553480156200001757600080fd5b5060405162002c8238038062002c828339810160408190526200003a91620003b6565b828b80604051806040016040528060018152602001603160f81b8152508e8e81600390816200006a91906200053f565b5060046200007982826200053f565b506200008b91508390506005620001be565b610120526200009c816006620001be565b61014052815160208084019190912060e052815190820120610100524660a0526200012a60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b0381166200016457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200016f81620001f7565b506009899055600a889055620001858862000249565b600c879055600d869055600e859055600f84905560108290556013620001ac82826200053f565b50505050505050505050505062000665565b6000602083511015620001de57620001d68362000258565b9050620001f1565b81620001eb84826200053f565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002536200029b565b600b55565b600080829050601f8151111562000286578260405163305a27a960e01b81526004016200015b91906200060b565b8051620002938262000640565b179392505050565b6008546001600160a01b03163314620002ca5760405163118cdaa760e01b81523360048201526024016200015b565b565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002ff578181015183820152602001620002e5565b50506000910152565b600082601f8301126200031a57600080fd5b81516001600160401b0380821115620003375762000337620002cc565b604051601f8301601f19908116603f01168101908282118183101715620003625762000362620002cc565b816040528381528660208588010111156200037c57600080fd5b6200038f846020830160208901620002e2565b9695505050505050565b80516001600160a01b0381168114620003b157600080fd5b919050565b60008060008060008060008060008060006101608c8e031215620003d957600080fd5b8b516001600160401b03811115620003f057600080fd5b620003fe8e828f0162000308565b60208e0151909c5090506001600160401b038111156200041d57600080fd5b6200042b8e828f0162000308565b9a505060408c0151985060608c0151975060808c0151965060a08c0151955060c08c0151945060e08c01519350620004676101008d0162000399565b6101208d01516101408e015191945092506001600160401b038111156200048d57600080fd5b6200049b8e828f0162000308565b9150509295989b509295989b9093969950565b600181811c90821680620004c357607f821691505b602082108103620004e457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200053a576000816000526020600020601f850160051c81016020861015620005155750805b601f850160051c820191505b81811015620005365782815560010162000521565b5050505b505050565b81516001600160401b038111156200055b576200055b620002cc565b62000573816200056c8454620004ae565b84620004ea565b602080601f831160018114620005ab5760008415620005925750858301515b600019600386901b1c1916600185901b17855562000536565b600085815260208120601f198616915b82811015620005dc57888601518255948401946001909101908401620005bb565b5085821015620005fb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200062c816040850160208701620002e2565b601f01601f19169190910160400192915050565b80516020808301519190811015620004e45760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516125c2620006c06000396000611624015260006115f7015260006111e1015260006111b9015260006111140152600061113e0152600061116801526125c26000f3fe6080604052600436106101e35760003560e01c806391b7f5ed11610102578063d505accf11610095578063de30c3b811610064578063de30c3b814610536578063e35568cb1461054b578063e4849b3214610560578063f2fde38b1461058057600080fd5b8063d505accf1461049b578063d864b847146104bb578063da31d640146104d0578063dd62ed3e146104f057600080fd5b8063a6f2ae3a116100d1578063a6f2ae3a14610435578063a9059cbb1461043d578063b8959a8b1461045d578063d13830661461047b57600080fd5b806391b7f5ed146103cb57806395d89b41146103eb57806398d5fdca14610400578063a5d8b6501461041557600080fd5b8063636f7def1161017a5780637a5b4f59116101495780637a5b4f591461033c5780637ecebe001461035157806384b0196e146103715780638da5cb5b1461039957600080fd5b8063636f7def146102ea57806370a08231146102f2578063715018a61461031257806379a95c701461032757600080fd5b806323b872dd116101b657806323b872dd146102775780632e1a7d4d14610297578063313ce567146102b95780633644e515146102d557600080fd5b806306fdde03146101e8578063095ea7b3146102135780631183577a1461024357806318160ddd14610262575b600080fd5b3480156101f457600080fd5b506101fd6105a0565b60405161020a9190611ede565b60405180910390f35b34801561021f57600080fd5b5061023361022e366004611f14565b610632565b604051901515815260200161020a565b34801561024f57600080fd5b50600e545b60405190815260200161020a565b34801561026e57600080fd5b50600254610254565b34801561028357600080fd5b50610233610292366004611f3e565b61064c565b3480156102a357600080fd5b506102b76102b2366004611f7a565b610670565b005b3480156102c557600080fd5b506040516000815260200161020a565b3480156102e157600080fd5b50610254610700565b6102b761070f565b3480156102fe57600080fd5b5061025461030d366004611f93565b6108ee565b34801561031e57600080fd5b506102b7610909565b34801561033357600080fd5b50601154610254565b34801561034857600080fd5b506101fd61091d565b34801561035d57600080fd5b5061025461036c366004611f93565b6109ab565b34801561037d57600080fd5b506103866109c9565b60405161020a9796959493929190611fae565b3480156103a557600080fd5b506008546001600160a01b03165b6040516001600160a01b03909116815260200161020a565b3480156103d757600080fd5b506102b76103e6366004611f7a565b610a0f565b3480156103f757600080fd5b506101fd610a1c565b34801561040c57600080fd5b50600b54610254565b34801561042157600080fd5b506102b7610430366004611f7a565b610a2b565b6102b7610a38565b34801561044957600080fd5b50610233610458366004611f14565b610dfb565b34801561046957600080fd5b506014546001600160a01b03166103b3565b34801561048757600080fd5b506102b761049636600461205d565b610e09565b3480156104a757600080fd5b506102b76104b636600461210e565b610e1d565b3480156104c757600080fd5b506101fd610f57565b3480156104dc57600080fd5b506102b76104eb366004611f93565b610f66565b3480156104fc57600080fd5b5061025461050b366004612181565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561054257600080fd5b50600c54610254565b34801561055757600080fd5b50610254610f90565b34801561056c57600080fd5b506102b761057b366004611f7a565b610fa8565b34801561058c57600080fd5b506102b761059b366004611f93565b610fb5565b6060600380546105af906121b4565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906121b4565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b5050505050905090565b600033610640818585610ff0565b60019150505b92915050565b60003361065a858285610ffd565b61066585858561107b565b506001949350505050565b6106786110da565b804710156106c25760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064015b60405180910390fd5b6008546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156106fc573d6000803e3d6000fd5b5050565b600061070a611107565b905090565b6107176110da565b600068b4ceb975c5301b0000600b546002546107339190612204565b61074590670de0b6b3a7640000612204565b61074f919061221b565b9050600068056bc75e2d631000008260105468056bc75e2d63100000610775919061223d565b61077f9190612204565b610789919061221b565b9050600c5442116108025760405162461bcd60e51b815260206004820152603d60248201527f596f75206e65656420746f207761697420756e74696c2074686520647565206460448201527f61746520746f20657863656375746520746869732066756e6374696f6e00000060648201526084016106b9565b804710156108695760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f7567682066756e647320746f206578656375746520696e766560448201526d73746d656e742072657475726e7360901b60648201526084016106b9565b60005b60125463ffffffff8216146108e957600060128263ffffffff168154811061089657610896612250565b6000918252602090912001546001600160a01b031690506108b6816108ee565b6000036108c357506108d7565b6108d5816108d0836108ee565b611232565b505b806108e181612266565b91505061086c565b505050565b6001600160a01b031660009081526020819052604090205490565b6109116110da565b61091b60006114f5565b565b606061093061092b600b5490565b611547565b61093c61092b600c5490565b61094861092b600e5490565b61095461092b60115490565b61095f61092b610f90565b6109796109746014546001600160a01b031690565b6115da565b610981610f57565b60405160200161099797969594939291906122a5565b604051602081830303815290604052905090565b6001600160a01b038116600090815260076020526040812054610646565b6000606080600080600060606109dd6115f0565b6109e561161d565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b610a176110da565b600b55565b6060600480546105af906121b4565b610a336110da565b600c55565b6000600b54670de0b6b3a7640000610a509190612204565b610a6368b4ceb975c5301b000034612204565b610a6d919061221b565b905060008111610ad55760405162461bcd60e51b815260206004820152602d60248201527f496e73756666696369656e742045544820616d6f756e7420746f20627579206160448201526c1039b4b733b632903a37b5b2b760991b60648201526084016106b9565b601154610ae1336108ee565b610aeb9083612420565b1015610b5f5760405162461bcd60e51b815260206004820152603b60248201527f496e73756666696369656e742045544820616d6f756e7420746f20627579207460448201527f6865206d696e696d756d20616d6f756e74206f6620746f6b656e73000000000060648201526084016106b9565b610b67610f90565b811115610bcb5760405162461bcd60e51b815260206004820152602c60248201527f496e73756666696369656e7420746f6b656e7320617661696c61626c652c207360448201526b0cadcc840d8cae6e6408aa8960a31b60648201526084016106b9565b600c544210610c1c5760405162461bcd60e51b815260206004820152601860248201527f46756e6420686173206265656e207465726d696e61746564000000000000000060448201526064016106b9565b610c26338261164a565b6008546001600160a01b03166001600160a01b03166108fc68056bc75e2d6310000034600f5468056bc75e2d63100000610c60919061223d565b610c6a9190612204565b610c74919061221b565b6040518115909202916000818181858888f19350505050158015610c9c573d6000803e3d6000fd5b50600068b4ceb975c5301b0000600b54610cb69084612204565b610cc890670de0b6b3a7640000612204565b610cd2919061221b565b610cdc903461223d565b90508015610d1357604051339082156108fc029083906000818181858888f19350505050158015610d11573d6000803e3d6000fd5b505b81610d1d336108ee565b036106fc576014546040513360248201526000916001600160a01b03169060440160408051601f198184030181529181526020820180516001600160e01b03166340d097c360e01b17905251610d739190612433565b6000604051808303816000865af19150503d8060008114610db0576040519150601f19603f3d011682016040523d82523d6000602084013e610db5565b606091505b50509050806108e95760405162461bcd60e51b8152602060048201526012602482015271139195081b5a5b9d1a5b99c819985a5b195960721b60448201526064016106b9565b60003361064081858561107b565b610e116110da565b60136106fc828261249f565b83421115610e415760405163313c898160e11b8152600481018590526024016106b9565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610e8e8c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610ee982611680565b90506000610ef9828787876116ad565b9050896001600160a01b0316816001600160a01b031614610f40576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016106b9565b610f4b8a8a8a610ff0565b50505050505050505050565b6060601380546105af906121b4565b610f6e6110da565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f9b60025490565b60095461070a919061223d565b610fb23382611232565b50565b610fbd6110da565b6001600160a01b038116610fe757604051631e4fbdf760e01b8152600060048201526024016106b9565b610fb2816114f5565b6108e983838360016116db565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611075578181101561106657604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016106b9565b611075848484840360006116db565b50505050565b6001600160a01b0383166110a557604051634b637e8f60e11b8152600060048201526024016106b9565b6001600160a01b0382166110cf5760405163ec442f0560e01b8152600060048201526024016106b9565b6108e98383836117b0565b6008546001600160a01b0316331461091b5760405163118cdaa760e01b81523360048201526024016106b9565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561116057507f000000000000000000000000000000000000000000000000000000000000000046145b1561118a57507f000000000000000000000000000000000000000000000000000000000000000090565b61070a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600081116112795760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081d1bdad95b88185b5bdd5b9d60621b60448201526064016106b9565b80611283836108ee565b10156112dd5760405162461bcd60e51b815260206004820152602360248201527f496e73756666696369656e7420746f6b656e7320696e20796f75722062616c616044820152626e636560e81b60648201526084016106b9565b6000600c5442101561131b5768056bc75e2d63100000600e54600b54846113049190612204565b61130e9190612204565b611318919061221b565b90505b6000600a54600b5411156113475782600a54600b5461133a919061223d565b6113449190612204565b90505b600068056bc75e2d63100000601054836113619190612204565b61136b919061221b565b905060008184600b548761137f9190612204565b611389919061223d565b611393919061223d565b9050600068b4ceb975c5301b00006113b383670de0b6b3a7640000612204565b6113bd919061221b565b9050804710156114355760405162461bcd60e51b815260206004820152603f60248201527f54686572652773206e6f7420656e6f7567682066756e647320696e207468652060448201527f636f6e747261637420746f20706179207468652062656e65666963696172790060648201526084016106b9565b600081116114ab5760405162461bcd60e51b815260206004820152603d60248201527f54686572652773206e6f7468696e67206c65667420666f7220796f75206d792060448201527f667269656e642c20626574746572206c75636b206e6578742074696d6500000060648201526084016106b9565b6114b5878761183c565b6040516001600160a01b0388169082156108fc029083906000818181858888f193505050501580156114eb573d6000803e3d6000fd5b5050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060600061155483611872565b600101905060008167ffffffffffffffff81111561157457611574612047565b6040519080825280601f01601f19166020018201604052801561159e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846115a857509392505050565b60606106466001600160a01b038316601461194a565b606061070a7f00000000000000000000000000000000000000000000000000000000000000006005611aca565b606061070a7f00000000000000000000000000000000000000000000000000000000000000006006611aca565b6001600160a01b0382166116745760405163ec442f0560e01b8152600060048201526024016106b9565b6106fc600083836117b0565b600061064661168d611107565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000806116bf88888888611b75565b9250925092506116cf8282611c44565b50909695505050505050565b6001600160a01b0384166117055760405163e602df0560e01b8152600060048201526024016106b9565b6001600160a01b03831661172f57604051634a1406b160e11b8152600060048201526024016106b9565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561107557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516117a291815260200190565b60405180910390a350505050565b6000806117bc846108ee565b1190506117ca848484611cfd565b6000806117d6856108ee565b119050811580156117e45750805b1561183557601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b0386161790555b5050505050565b6001600160a01b03821661186657604051634b637e8f60e11b8152600060048201526024016106b9565b6106fc826000836117b0565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106118b15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106118dd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106118fb57662386f26fc10000830492506010015b6305f5e1008310611913576305f5e100830492506008015b612710831061192757612710830492506004015b60648310611939576064830492506002015b600a83106106465760010192915050565b606082600061195a846002612204565b611965906002612420565b67ffffffffffffffff81111561197d5761197d612047565b6040519080825280601f01601f1916602001820160405280156119a7576020820181803683370190505b509050600360fc1b816000815181106119c2576119c2612250565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119f1576119f1612250565b60200101906001600160f81b031916908160001a9053506000611a15856002612204565b611a20906001612420565b90505b6001811115611a98576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110611a5457611a54612250565b1a60f81b828281518110611a6a57611a6a612250565b60200101906001600160f81b031916908160001a90535060049290921c91611a918161255f565b9050611a23565b508115611ac25760405163e22e27eb60e01b815260048101869052602481018590526044016106b9565b949350505050565b606060ff8314611ae457611add83611e27565b9050610646565b818054611af0906121b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1c906121b4565b8015611b695780601f10611b3e57610100808354040283529160200191611b69565b820191906000526020600020905b815481529060010190602001808311611b4c57829003601f168201915b50505050509050610646565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611bb05750600091506003905082611c3a565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611c04573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c3057506000925060019150829050611c3a565b9250600091508190505b9450945094915050565b6000826003811115611c5857611c58612576565b03611c61575050565b6001826003811115611c7557611c75612576565b03611c935760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611ca757611ca7612576565b03611cc85760405163fce698f760e01b8152600481018290526024016106b9565b6003826003811115611cdc57611cdc612576565b036106fc576040516335e2f38360e21b8152600481018290526024016106b9565b6001600160a01b038316611d28578060026000828254611d1d9190612420565b90915550611d9a9050565b6001600160a01b03831660009081526020819052604090205481811015611d7b5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016106b9565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216611db657600280548290039055611dd5565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e1a91815260200190565b60405180910390a3505050565b60606000611e3483611e66565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f81111561064657604051632cd44ac360e21b815260040160405180910390fd5b60005b83811015611ea9578181015183820152602001611e91565b50506000910152565b60008151808452611eca816020860160208601611e8e565b601f01601f19169290920160200192915050565b602081526000611ef16020830184611eb2565b9392505050565b80356001600160a01b0381168114611f0f57600080fd5b919050565b60008060408385031215611f2757600080fd5b611f3083611ef8565b946020939093013593505050565b600080600060608486031215611f5357600080fd5b611f5c84611ef8565b9250611f6a60208501611ef8565b9150604084013590509250925092565b600060208284031215611f8c57600080fd5b5035919050565b600060208284031215611fa557600080fd5b611ef182611ef8565b60ff60f81b881681526000602060e06020840152611fcf60e084018a611eb2565b8381036040850152611fe1818a611eb2565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b8181101561203557835183529284019291840191600101612019565b50909c9b505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561206f57600080fd5b813567ffffffffffffffff8082111561208757600080fd5b818401915084601f83011261209b57600080fd5b8135818111156120ad576120ad612047565b604051601f8201601f19908116603f011681019083821181831017156120d5576120d5612047565b816040528281528760208487010111156120ee57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600080600060e0888a03121561212957600080fd5b61213288611ef8565b965061214060208901611ef8565b95506040880135945060608801359350608088013560ff8116811461216457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561219457600080fd5b61219d83611ef8565b91506121ab60208401611ef8565b90509250929050565b600181811c908216806121c857607f821691505b6020821081036121e857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610646576106466121ee565b60008261223857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610646576106466121ee565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff80831681810361227f5761227f6121ee565b6001019392505050565b6000815161229b818560208601611e8e565b9290920192915050565b6a03d8511383934b1b2911d160ad1b815260006122c5600b83018a612289565b61160560f11b815260026122e88183016a011323ab2a230ba32911d160ad1b9052565b6122f5600d83018b612289565b61160560f11b815291507f226561726c79576974686472617750656e616c7479223a20000000000000000082820152612331601a83018a612289565b61160560f11b815291507101136b4b727bbb732b22a37b5b2b739911d160751b828201526123626014830189612289565b61160560f11b815291507201130bb30b4b630b13632aa37b5b2b739911d1606d1b828201526123946015830188612289565b61160560f11b815291507f226e6674436f6e747261637441646472657373223a2022000000000000000000828201526123d06019830187612289565b6211160560e91b815291506a1134b6b3aab936111d101160a91b60038301526123fc600e830186612289565b61110560f11b81529150607d60f81b82820152506003019998505050505050505050565b80820180821115610646576106466121ee565b60008251612445818460208701611e8e565b9190910192915050565b601f8211156108e9576000816000526020600020601f850160051c810160208610156124785750805b601f850160051c820191505b8181101561249757828155600101612484565b505050505050565b815167ffffffffffffffff8111156124b9576124b9612047565b6124cd816124c784546121b4565b8461244f565b602080601f83116001811461250257600084156124ea5750858301515b600019600386901b1c1916600185901b178555612497565b600085815260208120601f198616915b8281101561253157888601518255948401946001909101908401612512565b508582101561254f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008161256e5761256e6121ee565b506000190190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220566764808c5607e9a00f9496d9f437df814a74b778a6abd62de36066e35dd4aa64736f6c63430008180033a26469706673582212205e20ccd13a496b21a976b6219c451f35e90c7f4da40bea6cb0e528aa313cf6a364736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/TokenShopFactory.sol:TokenFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5807,
        "contract": "contracts/TokenShopFactory.sol:TokenFactory",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(RWF_Trust)5768)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(RWF_Trust)5768)dyn_storage": {
        "base": "t_contract(RWF_Trust)5768",
        "encoding": "dynamic_array",
        "label": "contract RWF_Trust[]",
        "numberOfBytes": "32"
      },
      "t_contract(RWF_Trust)5768": {
        "encoding": "inplace",
        "label": "contract RWF_Trust",
        "numberOfBytes": "20"
      }
    }
  }
}